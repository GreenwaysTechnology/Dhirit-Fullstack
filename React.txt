			 React/React.js
.....................................................................................

What is react?
 A JavaScript library for building user interfaces.

What is Angular?
  Angular is javascript framework for building user interfaces

What is Vue.js?
 Vue.js is javascript framework for building user interfaces

What is lib and framework?

 lib solves only one problem where as framework provides every thing end to end to build apps

Angular vs React:

1.Design pattern

 Angular uses traditional MVC design pattern 

React uses "Flux" design pattern

Flux is new design pattern to design ui invented by facebook.
 https://facebookarchive.github.io/flux/

https://facebookarchive.github.io/flux/docs/in-depth-overview

In Flux pattern react is "View/Ui/Presentation" Layer.

In Flux Pattern data is changed via "One directional Flow", You cant change data directly.

2.Coding style
  
 Any User interface development frameworks provides 
  1.Markup  - html code,css
  2.Data 

Angular isloates 
  markup(html,css) into separate  called "templates"
  data into services(holding data and biz logic)

React isloates
  markup into js code
  data into js code- hooks,state  management libs like redux...
 React embeds everything into javascript...

Programming files 
  Angular maintains lot of files, components,services,modules,directives,filters etc..which makes code base heavier

  React maintains very less code - components,statement management files,hooks...

Common things in both:

 Component driven, props
.....................................................................................
			     DOM
			 Virtual DOM
.....................................................................................

What is DOM?
   DOM is specification  released by W3c organgization,in order to build web apps for browsers.
https://www.w3.org/TR/1998/WD-DOM-19980416/		

in order to understand DOM fully , we need to understand HTML very deeply.

source code

hello.java
hello.c
hello.cpp
hello.py
hello.js
 ----->compiled ?
to generate assembly instructions

|
compiled code - assembly instruction
 hello.class
 hello.obj
|
Execute
 final output

HTML:

1.HTML IS PL? 
  - YES
2.HTML Is compiled 
  -YES
  HTML source code is compiled into assembly. 

3.HTML is executed?
  Yes

source code:

index.html

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

|
-------------------Browser
loader---LOAD Code into browser
 |
  from file: or http:
 |
Parser :
   Parser is special compiler which converts source into lexcial tree(string tree)

body
  div
     h1
        Welcome 
     h1
  div
body
|
 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body

.....................................................................................
				Runtime 
.....................................................................................
HTML Execution engine : Request Os ,to allocate memory :Runtime

-LinkedList
body -Node
 div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body

|
 Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
 |
Layout/Paint Engine: will convert nodes into pxs : final output

.....................................................................................
         Static web pages: htmls are displayed into browser.
.....................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

			That is birth of javascript
.....................................................................................
..............................................................................................
Static web pages: htmls are displayed into browser.
..............................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

that is birth of javascript.

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.

.....................................................................................

............................................................................................

How dom works?

index.html           Browser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT Inside javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*************************************************************************************

Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.
 
How via factory Objects: object helps to get other documents

Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.


Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.
...................................................................................
What is our objective here? DOM Programming?

Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements

HTMLElement document.getElementById(id)
      Find an element by element id
HTMLElement Document document.getElementsByTagName(name)
	Find elements by tag name
HTMLElement document.getElementsByClassName(name)
	Find elements by class name

HTMLElement document.querySelectory(selector) 
      find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements
document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element

/////////////////////////////////////////////////////////////////////////////////////

..................................................................................
		Birth of Java script libs and frameworks
....................................................................................
In 2001,DOM Wrappers - libs /frameworks came into picture.
 DOJO
2005, JQuery

After 2006 , community people started introducing so many js frameworks and libs..

Most Popular libs and frameworks

1.JQuery
2.Angular.js
3.Dojo
4.Extjs
5.Angular
6.React
7.Vue js
etc.....

Architecture tech stack for dom programming


Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine

Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		              -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	             React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
.....................................................................................

How react represents dom inside react engine?

Based on VDOM(Virtual DOM) specification...
	The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.

React is created by face book.

React was created not for others but created for face book one of the use case called "Buddylist" / chat application.

instagram web version was fully built by react.

React most implementations

1.flipkart ui is written react.
2.espn cric info
3.facebook use case chat , graph....
4.netflix
etc......

Where we can use React ? What type of application we can build using react.

Single Page web app...

Data intensive application // Data driven app
 where more data , which are chainging rapidly, where you want to update ui very faster with out ui flickering.

React can be used to build application for 

.........................................
1.browsers : Desktop
2.Mobile Apps : React Native

face book is working on many futures projects related to react

3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV (React Native)  : React for TV.
6.React IOT : any devices

We are going to learn react web for browsers.

React core modules:

react.js      => Core module
react-dom.js  => Browser
.....................................................................................				React and ui building
...................................................................................
React uses  a small programming language to describe UI called "JSX"

As we discussed React is used in many app dev like browser,mobile,tv apps.

Each app type(browser,mobile) has its own JSX syntax...

Browser jsx uses HTML as language
Mobile Jsx uses "Mobile markup" as language.

-----------------------------------------------------------------------------
 Markup layer             |  React Core Engine    | Render Engine   | Target
-----------------------------------------------------------------------------

HTML Markup---------------|  Object Tree(V.DOM)   | ReactDom.render |  Browser

Mobile Markup-------------|  Object Tree          |ReactNative.render| Mobile 						   /Tabs/TV

..............
VR Markup---------------  |  Object Tree          |VR.render         |VR devices

IOT Markup--------------- |  Object Tree          | IOT.render       |IOT Devices   
....................................................................................
Object Tree :

Note : in js every html element is object, in browser every element is node which forms tree.
<div>
   <h1>
       hello
   </h1>
       |
       div
          |
          h1
            hello

         |
         divObject
		|
		H1 Object
			hello


		|
		React engine
		   |

.....................................................................................
			 React Project Setup
.....................................................................................
We are going to build single page web app.

React teams offers tool set to create react project.

create-react-app
 now this tool has been depreciated.

now a days we are using vite based tool to create react projects.

npm create vite@latest

G:\dhiriti>npm create vite@latest
Need to install the following packages:
create-vite@5.3.0
Ok to proceed? (y) y


> npx
> create-vite

√ Project name: ... hello-react
√ Select a framework: » React
√ Select a variant: » JavaScript

Scaffolding project in G:\dhiriti\hello-react...

Done. Now run:

  cd hello-react
  npm install
  npm run dev

Project structure:
package.json
{
  "name": "hello-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "vite": "^5.3.1"
  }
}

entry file:
main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
...................................................................................
			DOM programming using plain js
...................................................................................

//how to create a dom element and update on existing tree
function createElement() {
  const HeadingElement=document.createElement('h1')
  HeadingElement.innerHTML='Hello React'
  const rootElement = document.getElementById('root')
  rootElement.appendChild(HeadingElement)
  //console.log(HeadingElement)
}
createElement();
....................................................................................
			DOM element creation using React
....................................................................................

main.jsx

import ReactDOM from 'react-dom/client'

//DOM element creation
//here we mix html + js code => jsx
const HeadingElement = <h1>Hello React!</h1>
// const rootElement =  document.getElementById('root')
// const root=ReactDOM.createRoot(rootElement)
// //vdom into real dom
// root.render(HeadingElement)

ReactDOM.createRoot(document.getElementById('root')).render(HeadingElement)































