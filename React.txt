			 React/React.js
.....................................................................................

What is react?
 A JavaScript library for building user interfaces.

What is Angular?
  Angular is javascript framework for building user interfaces

What is Vue.js?
 Vue.js is javascript framework for building user interfaces

What is lib and framework?

 lib solves only one problem where as framework provides every thing end to end to build apps

Angular vs React:

1.Design pattern

 Angular uses traditional MVC design pattern 

React uses "Flux" design pattern

Flux is new design pattern to design ui invented by facebook.
 https://facebookarchive.github.io/flux/

https://facebookarchive.github.io/flux/docs/in-depth-overview

In Flux pattern react is "View/Ui/Presentation" Layer.

In Flux Pattern data is changed via "One directional Flow", You cant change data directly.

2.Coding style
  
 Any User interface development frameworks provides 
  1.Markup  - html code,css
  2.Data 

Angular isloates 
  markup(html,css) into separate  called "templates"
  data into services(holding data and biz logic)

React isloates
  markup into js code
  data into js code- hooks,state  management libs like redux...
 React embeds everything into javascript...

Programming files 
  Angular maintains lot of files, components,services,modules,directives,filters etc..which makes code base heavier

  React maintains very less code - components,statement management files,hooks...

Common things in both:

 Component driven, props
.....................................................................................
			     DOM
			 Virtual DOM
.....................................................................................

What is DOM?
   DOM is specification  released by W3c organgization,in order to build web apps for browsers.
https://www.w3.org/TR/1998/WD-DOM-19980416/		

in order to understand DOM fully , we need to understand HTML very deeply.

source code

hello.java
hello.c
hello.cpp
hello.py
hello.js
 ----->compiled ?
to generate assembly instructions

|
compiled code - assembly instruction
 hello.class
 hello.obj
|
Execute
 final output

HTML:

1.HTML IS PL? 
  - YES
2.HTML Is compiled 
  -YES
  HTML source code is compiled into assembly. 

3.HTML is executed?
  Yes

source code:

index.html

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

|
-------------------Browser
loader---LOAD Code into browser
 |
  from file: or http:
 |
Parser :
   Parser is special compiler which converts source into lexcial tree(string tree)

body
  div
     h1
        Welcome 
     h1
  div
body
|
 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body

.....................................................................................
				Runtime 
.....................................................................................
HTML Execution engine : Request Os ,to allocate memory :Runtime

-LinkedList
body -Node
 div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body

|
 Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
 |
Layout/Paint Engine: will convert nodes into pxs : final output

.....................................................................................
         Static web pages: htmls are displayed into browser.
.....................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

			That is birth of javascript
.....................................................................................
..............................................................................................
Static web pages: htmls are displayed into browser.
..............................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

that is birth of javascript.

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.

.....................................................................................

............................................................................................

How dom works?

index.html           Browser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT Inside javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*************************************************************************************

Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.
 
How via factory Objects: object helps to get other documents

Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.


Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.
...................................................................................
What is our objective here? DOM Programming?

Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements

HTMLElement document.getElementById(id)
      Find an element by element id
HTMLElement Document document.getElementsByTagName(name)
	Find elements by tag name
HTMLElement document.getElementsByClassName(name)
	Find elements by class name

HTMLElement document.querySelectory(selector) 
      find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements
document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element

/////////////////////////////////////////////////////////////////////////////////////

..................................................................................
		Birth of Java script libs and frameworks
....................................................................................
In 2001,DOM Wrappers - libs /frameworks came into picture.
 DOJO
2005, JQuery

After 2006 , community people started introducing so many js frameworks and libs..

Most Popular libs and frameworks

1.JQuery
2.Angular.js
3.Dojo
4.Extjs
5.Angular
6.React
7.Vue js
etc.....

Architecture tech stack for dom programming


Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine

Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		              -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	             React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
.....................................................................................

How react represents dom inside react engine?

Based on VDOM(Virtual DOM) specification...
	The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.

React is created by face book.

React was created not for others but created for face book one of the use case called "Buddylist" / chat application.

instagram web version was fully built by react.

React most implementations

1.flipkart ui is written react.
2.espn cric info
3.facebook use case chat , graph....
4.netflix
etc......

Where we can use React ? What type of application we can build using react.

Single Page web app...

Data intensive application // Data driven app
 where more data , which are chainging rapidly, where you want to update ui very faster with out ui flickering.

React can be used to build application for 

.........................................
1.browsers : Desktop
2.Mobile Apps : React Native

face book is working on many futures projects related to react

3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV (React Native)  : React for TV.
6.React IOT : any devices

We are going to learn react web for browsers.

React core modules:

react.js      => Core module
react-dom.js  => Browser
.....................................................................................				React and ui building
...................................................................................
React uses  a small programming language to describe UI called "JSX"

As we discussed React is used in many app dev like browser,mobile,tv apps.

Each app type(browser,mobile) has its own JSX syntax...

Browser jsx uses HTML as language
Mobile Jsx uses "Mobile markup" as language.

-----------------------------------------------------------------------------
 Markup layer             |  React Core Engine    | Render Engine   | Target
-----------------------------------------------------------------------------

HTML Markup---------------|  Object Tree(V.DOM)   | ReactDom.render |  Browser

Mobile Markup-------------|  Object Tree          |ReactNative.render| Mobile 						   /Tabs/TV

..............
VR Markup---------------  |  Object Tree          |VR.render         |VR devices

IOT Markup--------------- |  Object Tree          | IOT.render       |IOT Devices   
....................................................................................
Object Tree :

Note : in js every html element is object, in browser every element is node which forms tree.
<div>
   <h1>
       hello
   </h1>
       |
       div
          |
          h1
            hello

         |
         divObject
		|
		H1 Object
			hello


		|
		React engine
		   |

.....................................................................................
			 React Project Setup
.....................................................................................
We are going to build single page web app.

React teams offers tool set to create react project.

create-react-app
 now this tool has been depreciated.

now a days we are using vite based tool to create react projects.

npm create vite@latest

G:\dhiriti>npm create vite@latest
Need to install the following packages:
create-vite@5.3.0
Ok to proceed? (y) y


> npx
> create-vite

√ Project name: ... hello-react
√ Select a framework: » React
√ Select a variant: » JavaScript

Scaffolding project in G:\dhiriti\hello-react...

Done. Now run:

  cd hello-react
  npm install
  npm run dev

Project structure:
package.json
{
  "name": "hello-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "vite": "^5.3.1"
  }
}

entry file:
main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
...................................................................................
			DOM programming using plain js
...................................................................................

//how to create a dom element and update on existing tree
function createElement() {
  const HeadingElement=document.createElement('h1')
  HeadingElement.innerHTML='Hello React'
  const rootElement = document.getElementById('root')
  rootElement.appendChild(HeadingElement)
  //console.log(HeadingElement)
}
createElement();
....................................................................................
			DOM element creation using React
....................................................................................

main.jsx

import ReactDOM from 'react-dom/client'

//DOM element creation
//here we mix html + js code => jsx
const HeadingElement = <h1>Hello React!</h1>
// const rootElement =  document.getElementById('root')
// const root=ReactDOM.createRoot(rootElement)
// //vdom into real dom
// root.render(HeadingElement)

ReactDOM.createRoot(document.getElementById('root')).render(HeadingElement)

.....................................................................................
	JSX - java script and XML - langugage to create User interfaces
.....................................................................................

React uses declarative dom programing using a mini language invented by facebook : JSX

JSX : - javascript xml

 1.PL language built by face book to write user interfaces.
 2.JSX is collection of html markup and javascript.
 3.JSX is dsl and declarative.
 4.Every device has its own jsx language syntax.
 5.Browsers jsx can't be used for building mobile application.

Since jsx  is a language cant be executed on browser /mobile directly.
.....................................................................................
JSX compilation model:

                   layout.js / layout.jsx
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Excution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		     Excute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
		     Render Engine ; will convert react object tree into js dom object tree
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |      |
     Browser  Mobile

JSX is used to create dom elements.

Every DOM element is object.

What is Component ?
  Component is Object , Coined by MS in 1989.

According to ms, Component is object which has state(data),behaviour(methods) + User interface(Visual).
 eg:Button,TextBox,Grid,Menu,MenuBar,Layout,Table.....

Like Object tree(DOM Tree), In React we can create "Component" Tree.


      Node===DOM Object====Component
       h1     HTMLHeading   Heading

"React apps are made out of components. A Component is piece of the UI that has its own logic and appearance, A CompIn coding 

Threre two libs 
1.react.js  => to create component and manages all features related component.
2.react-dom => Render engine

react.js

1.React
  It top level class which provides all apis to create,delete,update components.


react-dom.js

2.ReactDOM
   It is top level class which provides api to flush the v.dom into real dom.onent can be small as a button or as large as an entire Page"

..................................................................................
			Component Creational patterns
...................................................................................


1.variable pattern
2.functional pattern
3.es 6 class pattern

Components can be created any one or mixed way  style.
"functional Pattern" is more popular and recommended pattern....

steps:
create app 
 project name : compoenents

1.variable pattern
import React from 'react'
import ReactDOM from 'react-dom/client'

//variable Pattern
const Hello = <h1>Hello</h1>

ReactDOM.createRoot(document.getElementById('root')).render(Hello)


Functional Pattern:
...................

import React from 'react'
import ReactDOM from 'react-dom/client'

//functional pattern
function Hello(){
    //jsx element
    return <h1>
        Hello
    </h1>
}


ReactDOM.createRoot(document.getElementById('root')).render(Hello())

Here you are calling function "Hello()", which in returns dom element.

This way of calling function is called "Imperative way".

We need to call function using "Declarative way" - Readable way.

React recommends to call function using html(xml) syntax. <Hello></Hello>

import React from 'react'
import ReactDOM from 'react-dom/client'

//functional pattern
function Hello(){
    //jsx element
    return <h1>
        Hello
    </h1>
}


// ReactDOM.createRoot(document.getElementById('root')).render(Hello())
ReactDOM.createRoot(document.getElementById('root')).render(<Hello></Hello>)


Function Refactoring:

 we can write ES6 arrow functions.

import React from 'react'
import ReactDOM from 'react-dom/client'

//functional pattern
// function Hello(){
//     //jsx element
//     return <h1>
//         Hello
//     </h1>
// }

// const Hello = () => {
//         return <h1>
//         Hello
//     </h1>
// }

const Hello = () => <h1>
    Hello
</h1>



// ReactDOM.createRoot(document.getElementById('root')).render(Hello())
ReactDOM.createRoot(document.getElementById('root')).render(<Hello></Hello>)

....................................................................................
			 class components
...................................................................................

Using ES6 Classes we can create components, now a days class components been deprecated.
import React from 'react'
import ReactDOM from 'react-dom/client'

class Hello extends React.Component {

    render(){
        return <h1>
            Hello
        </h1>
    }

}

ReactDOM.createRoot(document.getElementById('root')).render(<Hello></Hello>)

.....................................................................................
			Exploring JSX
.....................................................................................

JS-Javascript
X -  XML

Since HTML parser is weak, but when y write react code, we need consistent code generation.

So that react team, developed compiler follows basic xml rules.


Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

			
const Welcome = ()=>{
    return <div>
        <h1>Hello
    </div>
}
This code will throw error.

Self closing:
import ReactDOM from 'react-dom/client';
import logo from './logo.svg';

//must have closing tag
// const Welcome = ()=>{
//     return <div>
//         <h1>Hello
//     </div>
// }
const Welcome = () => {
    return <div>
        <img src={logo} className="App-logo" alt="logo" />
    </div>
}

const root = ReactDOM.createRoot(document.getElementById('root'));

// root.render(<Welcome></Welcome>)
root.render(<Welcome/>)
.....................................................................................

Root Element:

import ReactDOM from 'react-dom/client';
import logo from './logo.svg';

const Welcome = () => {
    return <div>
        <h1>Site Heading</h1>
        <p>This is react</p>
    </div>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Welcome />)

Note:
 without root element , compiler will not compile the code, but
.....................................................................................
			  Fragments
....................................................................................

Fragements are used to wrap elements invisible way.

Suppose if i dont want any root element, then we can use Fragement.

Fragements are used to escape from compiler.

Syntax:

 <React.Fragment>

 </React.Fragement>


 <Fragment>

 </Fragement>

 <>

 </>
// import React, { Fragment } from 'react'
import ReactDOM from 'react-dom/client'

// const Hello = ()=> {

//     return <h1>Hello
// }

// const Greeter = () => {
//     return <div>
//         <h1>IBM Welcomes you</h1>
//         <p>This is paragraph</p>
//     </div>
// }

//Fragements
// const Greeter = () => {
//     return <React.Fragment>
//         <h1>IBM Welcomes you</h1>
//         <p>This is paragraph</p>
//     </React.Fragment>
// }

// const Greeter = () => {
//     return <Fragment>
//         <h1>IBM Welcomes you</h1>
//         <p>This is paragraph</p>
//     </Fragment>
// }
const Greeter = () => {
    return <>
        <h1>IBM Welcomes you</h1>
        <p>This is paragraph</p>
    </>
}

// ReactDOM.createRoot(document.getElementById('root')).render(<Hello></Hello>)
ReactDOM.createRoot(document.getElementById('root')).render(<Greeter />)

.....................................................................................
			 Component Composition
import ReactDOM from 'react-dom/client'


const Profile = () => {
    return <section>
        <h3>Alan Turing</h3>
        <h4>Born : 23 June 1912</h4>
        <h4>Died : 7 June 1954 (aged 41)
            Wilmslow, Cheshire, England
        </h4>
    </section>
}

function Gallery() {
    return <>
        <h1>Scientists / Computer</h1>
        <Profile />
        <Profile />
        <Profile />
    </>
}

const App = <>
    <div>
        <Gallery />
    </div>
</>
....................................................................................
			Structuring React apps
		  Component Composition and Modularity
.....................................................................................

Every Component will go into separate folders and files, through es 6 modules you can import export components..


Every Component will go into separate folders and files, through es 6 modules you can import export components..

https://legacy.reactjs.org/docs/faq-structure.html

Is there a recommended way to structure React projects?

React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.

Grouping by features or routes

common/
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css


EG:

src/profile/Profile.jsx
export const Profile = () => {
    return <section>
        <h3>Alan Turing</h3>
        <h4>Born : 23 June 1912</h4>
        <h4>Died : 7 June 1954 (aged 41)
            Wilmslow, Cheshire, England
        </h4>
    </section>
}

src/gallery/Gallery.jsx
import { Profile } from "../profile/Profile"

export function Gallery() {
    return <>
        <h1>Scientists / Computer</h1>
        <Profile />
    </>
}

src/App.jsx
import { Gallery } from "./gallery/Gallery";


export default function App() {
  return <div>
        <Gallery />
  </div>
}

src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
...................................................................................
			Barrel Export
..................................................................................

src/welcome/
   Hello.jsx
   Hai.jsx
   Greeter.jsx

when you import these files where ever, we have to import 
		 
import { Hello } from "./welcome/Hello"
import { Hai } from "./welcome/Hai"
import { Greeter } from "./welcome/Greeter"

Barrel export is nothing simplifiying export and import...
 Using Barrel export you dont need to use fileName when import
 Using Barrel export you dont need to use multiple import statement.

src/welcome/
   Hello.jsx
   Hai.jsx
   Welcome.jsx
   -index.js

YOu have to use index.js file

EG:

src/gallary/index.js
import { Gallery } from "./Gallery";

export { Gallery }

src/profile/index.js

import { Profile } from "./Profile";

export { Profile }



src/gallery/Gallery.jsx
// import { Profile } from "../profile/Profile"
import { Profile } from '../profile'

export function Gallery() {
    return <>
        <h1>Scientists / Computer</h1>
        <Profile />
    </>
}
src/App.jsx
// import { Gallery } from "./gallery/Gallery";
import { Gallery } from "./gallery";


export default function App() {
  return <div>
    <Gallery />
  </div>
}

.....................................................................................
			 React Dev tool
.....................................................................................

It is tool part of browser as plugin, used to insepect the structure of app.
https://react.dev/learn/react-developer-tools
.....................................................................................
			How to add css in react
.....................................................................................


1.Your own css
2.thrid party css frameworks - bootstrap

class
style - This will see later

if yo want to use bootstrap

npm i bootstrap

src/main.jsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
// import './index.css'
import 'bootstrap/dist/css/bootstrap.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
.....................................................................................
			 Data && React
....................................................................................

Data Binding:

Data can be attached in react using {}

How to represent data?
->primitives - string,numbers,boolean
->objects - object,arrays

How to bind data?
  {variable} {expression}
 
  {a} {fun()} {10*2} {isHidden ? 'Show':'Hide'} 

..................................................................................
			   Data Binding Patterns

1.property binding aka props pattern
2.State binding aka state pattern.

props Pattern:

npm create vite@latest

props-pattern
.....................................................................................

When you think about component , you should thing about resuablity..


src/gallery/Gallary.jsx
import { Profile } from "../profile/Profile"

export function Gallery() {
    let dided = " 7 June 1954 (aged 41) Wilmslow, Cheshire, England"
    return <>
        <h1>Scientists / Computer</h1>
        <Profile name={"Alan Turing"} born={"23 June 1912"} died={dided} isAlive={false} />
        <Profile name={"Timothy John Berners-Lee"} born={"23 June 1912"} isAlive={true}  />
    </>
}		
src/profile/Profile.jsx

//props = object
export const Profile = (props) => {
    return <section>
        <h3>{props.name}</h3>
        <h4>Born : {props.born}</h4>
        {!props.isAlive ? <h4>{`Died: ${props.died}`}</h4> : null}
    </section>
}
.....................................................................................
			  ES6 Object destructuring
....................................................................................


How to destructure props?

//props = object
// export const Profile = (props) => {
//     return <section>
//         <h3>{props.name}</h3>
//         <h4>Born : {props.born}</h4>
//         {!props.isAlive ? <h4>{`Died: ${props.died}`}</h4> : null}
//     </section>
// }

//destructure
// export const Profile = (props) => {
//     const { name, born, isAlive, died } = props
//     return <section>
//         <h3>{name}</h3>
//         <h4>Born : {born}</h4>
//         {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
//     </section>
// }

export const Profile = ({ name, born, isAlive, died }) => <section>
    <h3>{name}</h3>
    <h4>Born : {born}</h4>
    {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
</section>

.....................................................................................
			  Default Props
.....................................................................................

if property not passed you can supply default props.

How to supply default props?

1.old way

export const Profile = ({ name, born, isAlive, died }) => <section>
    <h3>{name}</h3>
    <h4>Born : {born}</h4>
    {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
</section>

//default props
Profile.defaultProps={
    name:'Scientists Name',
    born: '01 Jan 1900',
    isAlive:false,
    died:'23 June 1912'

}

2.new way

export const Profile = ({ name='Scientists Name', born='01 Jan 1900', isAlive=false, died='01 Jan 1900' }) => <section>
    <h3>{name}</h3>
    <h4>Born : {born}</h4>
    {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
</section>
.....................................................................................
			 Property Rethrow
.....................................................................................



//props = object
// export const Profile = (props) => {
//     return <section>
//         <h3>{props.name}</h3>
//         <h4>Born : {props.born}</h4>
//         {!props.isAlive ? <h4>{`Died: ${props.died}`}</h4> : null}
//     </section>
// }

//destructure
// export const Profile = (props) => {
//     const { name, born, isAlive, died } = props
//     return <section>
//         <h3>{name}</h3>
//         <h4>Born : {born}</h4>
//         {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
//     </section>
// }

// export const Profile = ({ name='Scientists Name', born='01 Jan 1900', isAlive=false, died='01 Jan 1900' }) => <section>
//     <h3>{name}</h3>
//     <h4>Born : {born}</h4>
//     {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
// </section>

// //default props
// Profile.defaultProps={
//     name:'Scientists Name',
//     born: '01 Jan 1900',
//     isAlive:false,
//     died:'23 June 1912'

// }

// export const Profile = ({ name = 'Scientists Name', born = '01 Jan 1900', isAlive = false, died = '01 Jan 1900' }) => <section>
//     {/* here we are rethrowing all properties to another component */}
//     <ProfileDetails name={name} born={born} isAlive={isAlive} died={died} />
// </section>



// export const Profile = (props) => <section>
//     {/* here we are rethrowing all properties to another component */}
//     <ProfileDetails name={props.name} born={props.born} isAlive={props.isAlive} died={props.died} />
// </section>
export const Profile = (props) => <section>
    {/* Rethrowing all properties to another component using Spread Notation */}
    <ProfileDetails {...props} salution="Mr/Mrs."/>
</section>

export const ProfileDetails = ({salution="Mr/Mrs.", name = 'Scientists Name', born = '01 Jan 1900', isAlive = false, died = '01 Jan 1900' }) => {
    return <><h3>{salution} {name}</h3>
        <h4>Born : {born}</h4>
        {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
    </>
}
.....................................................................................				Inline Styling
....................................................................................

<div class="cssClass">

<div style={}>

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const Header = () => {

    return <div>
        <h1 style={styles.heading}>Header</h1>
        <h2 style={{ color: 'blue', fontFamily: "sans-serif" }}>Your Company Goes Here</h2>
    </div>
}
const styles = {
    heading: {
        color: 'red'
    }
}


const App = () => {
    return <Header>

    </Header>
}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................
				What can be prop
.....................................................................................

1.Prop can be data
2.Prop can another component or element
..
3.Prop can be function
4.Prop can be state(dynamic prop)



1.Prop can another component or element.

How to render component

 <Grid></Grid> -  Grid can have children: passing prop
 <Grid/> -  Grid has no children
 
Parent-Child Relation ship:

cont A = ()=>{
  return <B/>
}
Parent-Child Relation ship:
 via props

<Layout> -parent
	<Page>-child
		<Header> -child
		   <Logo> -child

		   </Image>
		</Header>
	</Page>
</Layout>  
.....................................................................................
			Component as Prop

.....................................................................................

Use case : Without component as prop.

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const Page = () => {
    return <h1>Page</h1>
}
const Header = () => {
    return <h1>Header</h1>
}
const Footer = () => {
    return <h1>Footer</h1>
}
const Layout = () => {
    return <div>
        <Header />
        <Page />
        <Footer />
    </div>
}

const App = () => {
    return <>
        <Layout />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
...................................................................................

Use case: Component strucutre with props:
.........................................

<Layout> -parent
	<Page>-child
		<Header> -child
		   <Logo> -child

		   </Image>
		</Header>
	</Page>
</Layout>  

.....................................................................................
			Component as Prop

.....................................................................................

Use case : Without component as prop.

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const Page = () => {
    return <h1>Page</h1>
}
const Header = () => {
    return <h1>Header</h1>
}
const Footer = () => {
    return <h1>Footer</h1>
}
const Layout = () => {
    return <div>
        <Header />
        <Page />
        <Footer />
    </div>
}

const App = () => {
    return <>
        <Layout />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

Use case : with Props:
......................

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const Page = ({ children }) => {
    return <>
        {children}
    </>
}
const Header = ({ title }) => {
    return <h1>{title}</h1>
}
const Footer = () => {
    return <h1>Footer</h1>
}
const Layout = (props) => {
    return <div>
        {props.children}
    </div>
}
const User = (props) => {
    console.log(props)
    return <div>
        <img src={props.imageSrc} alt='Your Image' />
        <h1>{props.id}</h1>
        <p>{props.userName}</p>
        <p>{props.mail}</p>
        <p>{props.status ? "Available" : "Not Available"}</p>
    </div>
}


const App = () => {
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'

    return <>
        <Layout>
            {/* Passing Header as prop */}
            <Header title="User Information system">
                 
            </Header>
            {/* Passing Page as prop */}
            <Page>
                <User userName={"Ram"} id={2} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
            </Page>
            {/* Passing Footer as prop */}
            <Footer />
        </Layout >
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................
			  List : How to render array
.....................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const List = props => {
    return <div>
        <ul>
            {
                props.names.map(name=>{
                    return <li>{name}</li>
                })
            }
        </ul>
    </div>
}

const App = () => {
    const names = ['Subramanian', 'Murugan', 'Geetha', 'DhiviyaSree', 'Shirisha']
    return <div>
        <h1>List</h1>
        <List names={names}/>
    </div>

}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

.....................................................................................
			 Object List Rendering

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import POSTS from './mock-data/posts'

const Posts = ({ posts }) => {
    return <>
        {
            posts.map(post => {
                return <section key={post.id}>
                     <h1>{post.id}</h1>
                     <h3>{post.title}</h3>
                     <p style={{fontFamily:'sans-serif', color:'Highlight'}}>{post.body}</p>
                </section>
            })
        }
    </>
}

const App = () => {
    return <div>
        <h1>POSTS</h1>
        <Posts posts={POSTS} />
    </div>

}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

Task:

By using list

1.Card View
2.Table View /Grid View
...................................................................................
			   State Pattern
		       (Dynamic User Interface)
			 (Event Handling)
....................................................................................

What is state?
  State is another way of representing data in React.

As of we have seen data is not changing or updating...

How to introduce State?

There are two ways

1.class pattern 
   It is legacy way of representing state and Managining state
   It is not recommended..

2.Function pattern
    It is modern way of representing state
    State is represented via "Hook".


1.class pattern 

Declare class:
import React from 'react';
import ReactDOM from 'react-dom';


class Review extends React.Component {

    render() {
        return <div>
            <h1>Review Component</h1>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
..................................................................................
Declare data:

React.Component is super class , which is having properites and methods

Methods:

1.lifecycle methods
2.setState
3.forceUpdate()

Instance Properties

1.state
2.props

state default value is null, that means we need to initalize state variable with data.

import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

here out put would be "null"

...

How to declare state?

import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 0
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
..............
How to bind state in UI, what is initial state.

Initial state means, the state(data) is associated with UI during first rendering.

import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 10
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like}</h5>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

....................................................................................
			  Event Handler
....................................................................................
import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 10
    }
    //listener: arrow function
    onLike = () => {
        console.log('like')
    }
    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like}</h5>
            <button onClick={this.onLike}>😁</button>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);



.................................................................................
		Before writing code, we need to learn the concept
....................................................................................
			Functional Programming principles
....................................................................................
Programming paradigms:
 any programming language is built on the top of programming paradigms
 Collections of set of principles and concepts.

Most popular programming paradigms.
1.Object oriented
   C++,java,C#......
2.Procedural oriented
   C
3.Functional Programming 
   LISP,Clojure,scheme,js

Some languages follow multiple paradigms (hybrid) , some follow single paradigm (solo)

javascript is object based, functional style programming language.
java is object oriented,functional style programming...

What is functional programming?

  It is type of programming paradigm.

functional programming is the first programming paradagim introduced in 1935, as part of Mathmetics called "Lambda Calculs".

The first functional programming language called "LISP" was created in 1955.

React uses fp principles:

1.Pure functions
2.Immuablity


Pure Functions:

Pure functions are defined by two rules..

Rule A:
  if function receives input, the function returns the input without any mutation...

//fp principles : rule A:


//is this function is pure or not : pure 
function Hello(message) {
    return message
}
console.log(Hello('hello'))

//is this function is pure or not: impure function
function doubleIt(value) {
    return value * 2
}
console.log(doubleIt(20))

Are we applying pure function rule a in React?


Yes,With Respect to "props" every function is pure.

//Pure function rule A in react.
import ReactDOM from 'react-dom/client';

//Every component is  based on pure function with respect to "props"
const Welcome = props => {
    //props.message = 'hai' // props are read only
     return <div>
        <h1>{props.message}</h1>
    </div>
}

const App = () => {
    return <>
        <Welcome message="hello" />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
.....................................................................................
				Pure Function Rule B
....................................................................................
Rule B:
.......
 if function receives input, what if i want to change(mutate),We can apply rule b.
 
if function receives input,and modify input , we should return new object every time, which is called immutablity.
 



//pure function Rule B


function updateProfile(city, profile) {
    //update profile city 
    profile.city = city
 
    return profile
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

Result:
before update {name: 'Subramanian', city: 'Coimbatore'}
index.js:18 Same Object
index.js:19 after update {name: 'Subramanian', city: 'Chennai'}

The above code is pure or not?

The above is not pure, it is impure.

 "I need to mutate state(data), but at the same time, i need purity"
			
	                  Apply Immutablity Principle


What is immutability?

  When ever you update the data(object), you have to create new object every time.

In order to write immutable code, js supports many patterns

1. Plain js pattern.
//pure function Rule B

function updateProfile(city, profile) {
    //return new object
    return {
        name: profile.name,
        city: city
    }
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

Plain js pattern has some drawback, we have to copy all the properties manually...

2.Object.assign pattern
//pure function Rule B

function updateProfile(city, profile) {
    //Object.assign 
    return Object.assign({}, profile, { city: city })
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

3.ES 7 Spread operator 
//pure function Rule B

function updateProfile(city, profile) {
      return { ...profile, city }
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

.....................................................................................
.....................................................................................
			Arrays -Pure functions (immutablity)
.....................................................................................

Array pure functions:

1.map
  map is pure function , which returns new array when you iterate.

2.filter
  filter is also function, which returns new array when you iterate.

map:


function transform(data) {

    return data.map(item => item)
}

let list = ['subramanian', 'ram', 'murugan']

const response = transform(list)

console.log(list === response ? "Same" : "Different")

filter:


function filter(data) {

    return data.filter(item => item.status === true)
}

let employees = [{
    id: 1,
    name: 'subramanian',
    status: true
},
{
    id: 2,
    name: 'Ram',
    status: false
},
{
    id: 3,
    name: 'Karthik',
    status: true
},
{
    id: 4,
    name: 'Murugan',
    status: false
}

]

const response = filter(employees)

console.log(employees === response ? "Same" : "Different")
.....................................................................................

Add Item:

push


//is it pure or not
function add(todos, todo) {
    return todos.push(todo)
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));


Response:
Uncaught TypeError: Cannot add property 1, object is not extensible

You are trying to add  on exiting memory... which is not pure and immutable...

so "array.push" is not pure function.

How to add item into array with purity:

Solution:

1.concat
   it is pure and immutable method..

//is it pure or not
function add(todos, todo) {
   // return todos.push(todo)
   return todos.concat(todo)
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));

2.Using spread operator

//is it pure or not
function add(todos, todo) {
    // return todos.push(todo)
    //  return todos.concat(todo)
    return [...todos, todo]
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));
....................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

class Like extends React.Component {

    state = {
        value: 0
    }
    //Event Listener
    onIncrement = () => {
        //through pure function only we can mutate the state
        //prevState is just variable holding "State Object"
        this.setState((prevState) => {
            //return immutable object
            // return {
            //     value: prevState.value+1
            // }
            // return Object.assign({}, prevState, { value: prevState.value + 1 })
            return { ...prevState, value: prevState.value + 1 }
        })
    }

    render() {
        console.log(this.state)
        const { value } = this.state
        return <div>
            {/* <h1>Like {this.state.value}</h1> */}
            <h1>Like {value}</h1>
            <button onClick={this.onIncrement}>Like</button>
        </div>
    }
}

const App = () => {
    return <>
        <Like />
    </>

}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................
			  Multi state
....................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

class Review extends React.Component {

    state = {
        like: 0,
        dislike: 0
    }
    //listener
    onLike = () => {
        this.setState((prevState) => {
            //return immutable object
            return { ...prevState, like: prevState.like + 1 }
        })
    }
    onDislike = () => {
        this.setState((prevState) => {
            //return immutable object
            return { ...prevState, dislike: prevState.dislike + 1 }
        })
    }

    render() {
        console.log(this.state)
        return <>
            <h1>Review</h1>
            <h2>Like: {this.state.like} Dislike: {this.state.dislike}</h2>
            <button onClick={this.onLike}>Like</button>
            <button onClick={this.onDislike}>Dislike</button>

        </>
    }
}

const App = () => {
    return <Review />
}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
......................................................................................
				Inline Listener
.....................................................................................

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

class Review extends React.Component {

    state = {
        like: 0,
        dislike: 0
    }

    render() {
        console.log(this.state)
        return <>
            <h1>Review</h1>
            <h2>Like: {this.state.like} Dislike: {this.state.dislike}</h2>
            {/* inline listener */}
            <button onClick={() => {
                this.setState((prevState) => {
                    //return immutable object
                    return { ...prevState, like: prevState.like + 1 }
                })
            }}>Like</button>
            <button onClick={() => {
                this.setState((prevState) => {
                    //return immutable object
                    return { ...prevState, dislike: prevState.dislike + 1 }
                })
            }}>Dislike</button>

        </>
    }
}

const App = () => {
    return <Review />
}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................
				Nested State
....................................................................................

state= {
   house:{
     name:'RavenClaw',
     points:10
   }
}

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

class Review extends React.Component {

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }

    render() {
        return <>
            <h1>Review</h1>
            <h2>House {this.state.house.name}</h2>
            <h2>Points {this.state.house.points}</h2>
            <button onClick={() => {
                this.setState((prevState) => {
                    //return immutable object
                    return {
                        ...prevState, //level-0 copy
                        house: {
                            ...prevState.house, // level -1 copy
                            points: prevState.house.points + 2
                        }

                    }
                })
            }}>Like</button>

        </>
    }
}

const App = () => {
    return <Review />
}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

.....................................................................................
				Deep Nesting
.....................................................................................

Assigment:
state = {
  customer: {
    id:1,
    name:'Subramanian'
    contact: {
	address: {
	    city:'Chennai'
	},
	communcation:{ 
           mobileNo:'9000000'
	}
    }
  }

}

How to update mobileNo - 834343434
.....................................................................................
		      Complxity of Immutable Objects 
				 and 
			How to solve  them using 
			     immer.js
.....................................................................................
What is immer?
  immer is simple js lib, which helps to write complex immutable code in "mutable way" like regular javascript way.

immutable syntax to update object property:

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }

     return {
                ...prevState, //level -0 copy
                house: {
                    ...prevState.house, // level-1 copy
                    points: prevState.house.points + 2
                }
        }

js syntax:

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }

update state:

state.house.points +=2

immer is lib which takes care of writing immutable code on behalf of us, developer writes mutable code, immer converts into immutable code.

Immer core concept:

immer provides a function called "produce"

produce(state,(draft)=>{
  draft.house.points +=2
})

Getting started:

steps:

1.install immer lib

npm i immer

import React from 'react';
import ReactDOM from 'react-dom/client';
import { produce } from 'immer';
import './index.css'

class HouseRating extends React.Component {

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }
    onIncreasePointsByTwo = () => {
        this.setState((prevState) => {
            return produce(prevState, (draft) => {
                draft.house.points += 2
            })

        })
    }
    render() {
        return <div>
            <h1>House Rating Component</h1>
            <h3>House Name : {this.state.house.name}</h3>
            <h3>Points : {this.state.house.points}</h3>
            <button onClick={this.onIncreasePointsByTwo}>Rate</button>
        </div>
    }
}


const App = () => {
    return <>
        <HouseRating />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

....................................................................................
			 State and function as prop
..................................................................................



import React from 'react';
import ReactDOM from 'react-dom/client';
import { produce } from 'immer';
import './index.css'

class HouseRating extends React.Component {

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }
    onIncreasePointsByTwo = () => {
        this.setState((prevState) => {
            return produce(prevState, (draft) => {
                draft.house.points += 2
            })

        })
    }
    render() {
        return <>
            {/* here state as prop(dynamic prop) and function as prop */}
            <HouseRatingDashBoard {...this.state} onIncrement={this.onIncreasePointsByTwo} />
        </>
    }
}

const HouseRatingDashBoard = props => {
    console.log
    return <div>
        <h1>House Rating Component</h1>
        <h3>House Name : {props.house.name}</h3>
        <h3>Points : {props.house.points}</h3>
        <button onClick={props.onIncrement}>Rate</button> 
    </div>
}


const App = () => {
    return <>
        <HouseRating />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
.....................................................................................
....................................................................................
			 Component Life cycles
.....................................................................................

React Component life cycle can be classified into three major phases

1.Mount

2.Update

3.UnMount

1.Mount :
  Incase of class component

 1.constructor
     Called only once in the component initalization
     constructors are not used very much...
 2.render
    Called for creating object tree-component tree-Virtual DOM

 3.componentDidMount
    Called after render method, once the dom is ready- once ui is compltly loaded

    This method is used heavily  used in react all versions.

   It is used to inital data fetching from the apis
   It is used to write any async task
   It is used to write websocket connections


2.Update
    When user starts interacting
   when state is mutated  -setState,forceUpdate
   when new props are supplied -state as prop
  
   render
      method is called after state mutation, in order to update ui with new state/
   during render call,it creates vdom, apply an algorthim called "diff", to compute    old tree and new tree, update dom accordingly.
  
   componentDidUpdate
     It is method which is called after render is completed in update cycle.
    incase if you want fetch data from api after dom updates
    incase if you want to do any async tasks.
    
3.UnMount
  When component is removed from memory
 ComponentWillunMount
   any resource clean up task...


Mount Phase:
...........
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'

class LifeCycleHooks extends React.Component {

    constructor() {
        super();
        console.log('constructor is called')
    }
    componentDidMount() {
        console.log('ComponentDid Mount is called')
    }

    render() {
        console.log('render is called')
        return <>
            <h1>Component Life Cycle</h1>
        </>
    }
}


const App = () => {
    return <>
        <LifeCycleHooks />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

Update Phase:
 when you change /mutate state

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'

class LifeCycleHooks extends React.Component {

    state = {
        value: 0
    }
    constructor() {
        super();
        console.log('constructor is called')
    }
    componentDidMount() {
        console.log('ComponentDid Mount is called')
    }

    componentDidUpdate(){
        console.log('Component Did Update is called')
    }
    render() {
        console.log('render is called')
        return <>
            <h1>Component Life Cycle {this.state.value}</h1>
            <button onClick={() => {
                this.setState((oldState) => {
                    return {
                        value: oldState.value + 1
                    }
                })
            }}>+</button>
        </>
    }
}


const App = () => {
    return <>
        <LifeCycleHooks />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
...................................................................................
			Component Lifes and API Call
...................................................................................

In order to talk to REST API, react has no any opinion regarding which ajax libs should be used

Popular ajax libs used inside react

1.fetch
2.axios

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'
import { produce } from 'immer';

class Posts extends React.Component {
    //declare state
    state = {
        posts: [], //data 
        error: null, //error
        isLoading: false//spinner
    }

    
    async componentDidMount() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const response = await fetch(url);
            const posts = await response.json()
            //populate data with state
            this.setState((prevState) => {
                return produce(prevState, (draft) => {
                    //fill api response with state
                    draft.posts = posts
                    draft.isLoading = true
                })
            })
        }
        catch (err) {
            this.setState((prevState) => {
                return produce(prevState, (draft) => {
                    //fill api response with state
                    draft.err = err
                })
            })
        }
    }

    render() {
        //show different ui based on different state: conditional rendering
        const { posts, error, isLoading } = this.state
        if (error) {
            return <div>
                <h1>Error : {error.message}</h1>
            </div>
        } else if (!isLoading) {
            return <h2>Loading...</h2>
        } else {
            return <div>
                <h1>Posts</h1>
                <hr />
                <ul>
                    {
                        posts.map(post => {
                            return <li>{post.title}</li>
                        })
                    }
                </ul>
            </div>
        }
    }

}


const App = () => {
    return <>
        <Posts />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);


Task:
 Build product page

fake Url:
https://fakestoreapi.com/products

.....................................................................................
			.....................................................................................
			Functional components, state,life cycle methods
					(Hooks)
....................................................................................


What is hook and why?

Hooks are simple javascript function which holds Component's logic outside component.

"Incase of class component , if you define a biz logic, the similar logic if you have in another component, we can't reuse."

React 16 introduced a feature called hooks, by using hooks you can eleminate class components completly, by keeping functional components

Hooks abstract complex  biz logic in reusable mannager.

React provides lot of built in hooks to build app , as simple as possible , mean time you can create your own hooks (custom hooks).

Hooks features:

1.hook is simple js function
2.hook can take input and also return values
3.every hook function starts with "useHookName"


Common Built in Hooks

1.useState
   To declare state and mutation inside functions
2.useEffect
   It represents "Life Methods" - compoentDidMount,componentDidUpdate
3.useContext
4.useRef
5.useMemo
6.useCallback
etc......

Thanks class components,goodbye to class components....

State declaration,mutation:
...........................

useState:

Syntax:

const [state,setState]=useState(initalState)

state is just variable it could be any thing
setState -  pure function its name generally setVariableName

const [counter,setCounter]=useState(initalState)

initalState could be

1.primitive values numbers,string,boolean
2.objects
3.arrays

const [counter,setCounter]=useState(0)
const [state,setState]=useState('hello')
const [state,setState]=useState(false)
const [state,setState]=useState(null)
const [state,setState]=useState({count:0})
const [state,setState]=useState([])

eg:
import React, { useState } from "react"

class Review extends React.Component {

  state = {
    like: 0
  }
  onIncrement = () => {
    this.setState((prevState) => {
      return {
        like: prevState.like + 1
      }
    })
  }
  render() {
    return <>
      <h1>{this.state.like}</h1>
      <button onClick={this.onIncrement}>+</button>
    </>
  }
}

const Counter = () => {
  const [counter, setCounter] = useState(0)
  const onIncrement = () => {
    // setCounter((prevState) => {
    //   return prevState + 1
    // })
    setCounter(counter + 1)
  }
  return <>
    <h1>{counter}</h1>
    <button onClick={onIncrement}>+</button>
  </>

}


export default function App() {
  return <div>
    <Counter />
  </div>
}
.....................................................................................
				Multi State
.....................................................................................

import React, { useState } from "react"

const Review = () => {
    const [like, setLike] = useState(0)
    const [dislike, setDislike] = useState(0)
    return <>
        <h1>{like} {dislike}</h1>
        <button onClick={() => {
            setLike(like + 1)
        }}>Like</button>
        <button onClick={() => {
            setDislike(dislike + 1)
        }}>Dislike</button>
    </>

}


export default function App() {
    return <div>
        <Review />
    </div>
}
.....................................................................................
			    Hooks and Object
....................................................................................

import React, { useState } from "react"

const Review = () => {

    const [review, setReview] = useState({ like: 0, dislike: 0 })

    return <>
        <h1>{review.like} {review.dislike}</h1>
        <button onClick={() => {
            setReview((prevState) => {
                return { ...prevState, like: prevState.like + 1 }
            })
        }}>Like</button>
        <button onClick={() => {
            setReview((prevState) => {
                return { ...prevState, dislike: prevState.dislike + 1 }
            })
        }}>Dislike</button>
    </>

}


export default function App() {
    return <div>
        <Review />
    </div>
}
.................................................................................
			   Hooks with immerjs
...................................................................................
import React, { useState } from "react"
import { produce } from "immer"

const Review = () => {

    const [review, setReview] = useState({ like: 0, dislike: 0 })

    return <>
        <h1>{review.like} {review.dislike}</h1>
        <button onClick={() => {
            setReview((prevState) => {
                // return { ...prevState, like: prevState.like + 1 }
                return produce(prevState, (draft) => {
                    draft.like += 1
                })
            })
        }}>Like</button>
        <button onClick={() => {
            setReview((prevState) => {
                // return { ...prevState, dislike: prevState.dislike + 1 }
                return produce(prevState, (draft) => {
                    draft.dislike += 1
                })
            })
        }}>Dislike</button>
    </>

}


export default function App() {
    return <div>
        <Review />
    </div>
}
.....................................................................................
			 How to get input from the user
.....................................................................................

import React, { useState } from "react"
import { produce } from "immer"

const Login = () => {

    const [userName, setUserName] = useState('Your Name goes here')

    const onUpdate = (evt) => {
        setUserName(evt.target.value)
    }

    return <>
        <h2>Name : {userName}</h2>
        <input value={userName} onChange={onUpdate} />
        <button onClick={() => {
            alert(userName)
        }}>Get Value</button>

    </>

}


export default function App() {
    return <div>
        <Login />
    </div>
}
Task:

Create Registration Form:

User Name
Password 
Gender - options
Education -checkbox
City -  selectbox
....................................................................................
Form Handling:
https://formik.org/
...................................................................................
			useEffect and api call
....................................................................................

comonentDidMount,componentDidupdate,componentWillUnMount
    =>useEffect

componentDidMount
useEffect(()=>{},[])
useEffect(()=>{})

ComponentDidUpdate
useEffect(()=>{},[state])
 here if state is updated, then this hook will be called

import React, { useEffect, useState } from "react"
import { produce } from "immer"

const Posts = () => {
    const [post, setPost] = useState({
        posts: [], //data
        error: null,
        isLoading: false
    })
    //api
    async function fetchPosts() {
        const url = 'https://jsonplaceholder.typicode.com/posts'
        try {
            const response = await fetch(url)
            const posts = await response.json()
            setPost(previousState => {
                return produce(previousState, draft => {
                    draft.posts = posts
                    draft.isLoading = true
                    draft.error = previousState.error
                })
            })
        }
        catch (err) {
            setPost(previousState => {
                return produce(previousState, draft => {
                    draft.error = err
                })
            })
        }
    }

    useEffect(() => {
        fetchPosts()
    }, [])

    if (post.error) {
        return <div style={{ marginLeft: 50 }}>
            <h1>Error : {post.error.message}</h1>
        </div>
    } else if (!post.isLoading) {
        return <h1 style={{ textAlign: 'center' }}>🛴</h1>
    } else {
        return <div style={{ marginLeft: 50 }}>
            <h1>Posts</h1>
            <hr />
            <ul>
                {post.posts.map(post => {
                    return <li key={post.id}>{post.title}</li>
                })}
            </ul>
        </div>


    }
}

export default function App() {
    return <div>
        <Posts />
    </div>
}
.....................................................................................
			Component state

Component state can be mananged inside component using state and setState or useState hook.

Component state can be moved away from the component using Redux..

.....................................................................................
			 Redux -State Management
.....................................................................................

What is state?
 State is nothing data.

State is managed within component.

What if i want to share the state across the application,there is pattern called "Lift up the state", pass as prop.

In state management , redux is going to act as state layer, react is going act as UI layer.

React and Redux is based on the design pattern "Flux Pattern"


https://facebookarchive.github.io/flux/


Action---->dispatcher----->Store<--->[Reducer] 
			    |
			    |
			 View-React


What is Redux -  Red-reducer + ux (Flux) => Reducer + Flux

What is Reducer?
  Reducer is pure function, which accepts input, returns immutable object...
  Reducer is having biz logic.
  Who calls reducer, reducer is called by store..
  UI Layer never communicates biz logic (reducer) directly.
  UI Layer sends request(action) --via dispatcher---to the store, then store reacts   to that

Core Concepts or Principles:
............................

1.State:
   Redux maintains or stores the data in "single object" Redux is going to store all 
component state into one single object -Application State

const appState = {
  ....   
} called as application state.

How appState is identified for each compoent?

Based on category/module.

const appState = {
  
  order: {
    
  },
  customer: {},
  product:{}

} 
2.Store
   Store is object where Redux application state lives.
   Store offers api to communicate from react and redux to react
   Store is entry and exit point of react and redux
   Per application , there is single store, that store is having state..

3.reducer
    You know very well how to mutate and where mutate state in react
     ->Inside setState pure function.
    Reducer is pure function which returns immutable object.

4.actions
    An action is like request in webserver, redux actions are plain javascript object
 eg:
  let counterAction = {
	type:'counter/increment'
  }
 action may take input also called payload
  let counterByAmount = {
   type:'counter/increment',
   payload:2
 }
5.Dispatcher 
  It is transporter which transport action object from react to redux
  Dispatcher is represented by a method called "dispatch"
  dispatch is part of "Store object"
  store.dispatch(action)


Create new project:
...................

npm create vite@latest


Dependencies:
............

npm install @reduxjs/toolkit  react-redux


Redux Coding:

1.biz logic - reducer

2.create Store object

3.Configure store with reducer

React coding :

1.write component 
2.consume data and call biz logic - callig redux logic
3.Connect react and redux using react-redux lib

Reducer Coding:

1.pure function, having state mutation logic

How to write reducer?

1.old redux way

2.new redux way - using redux toolkit


1.old redux way;

import { configureStore } from '@reduxjs/toolkit'
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { Provider, useDispatch, useSelector } from 'react-redux'

//redux coding
//reducer 
const CounterReducer = (counter = 100, action) => {
    //biz logic
    switch (action.type) {
        case 'counter/increment':
            return counter + 1
        case 'counter/decrement':
            return counter - 1
        default:
            //default state
            return counter;
    }

}
//create store Object
const appStore = configureStore({
    reducer: {
        //name:Reference
        counter: CounterReducer
    }
})
//react coding

const Counter = props => {

    //read value from redux
    const counter = useSelector((state) => {
        //appState.reducerName
        return state.counter
    })
    const dispatch = useDispatch()

    const onIncrement = () => {
        console.log('increment')
        //dispactch an action to redux
        const incrementAction = {
            type: 'counter/increment'
        }
        dispatch(incrementAction)
    }

    return <div>
        <h1>Counter -React -Redux</h1>
        <h2>Counter : {counter}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            dispatch({ type: 'counter/decrement' })
        }}>-</button>

    </div>
}

const App = () => {
    return <Provider store={appStore}>
        <Counter />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>

)
....................................................................................
				State as Object
.....................................................................................
import { configureStore } from '@reduxjs/toolkit'
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { Provider, useDispatch, useSelector } from 'react-redux'

//redux coding
//reducer 
const CounterReducer = (state = { counter: 10 }, action) => {
    //biz logic
    switch (action.type) {
        case 'counter/increment':
            //immutable logic
            return { ...state, counter: state.counter + 1 }
        case 'counter/decrement':
            //immutable logic
            return { ...state, counter: state.counter - 1 }
        default:
            //default state
            return state;
    }

}
//create store Object
const appStore = configureStore({
    reducer: {
        //name:Reference
        counter: CounterReducer
    }
})
//react coding

const Counter = props => {

    //read value from redux
    const state = useSelector((state) => {
        //appState.reducerName
        return state.counter
    })
    const dispatch = useDispatch()

    const onIncrement = () => {
        console.log('increment')
        //dispactch an action to redux
        const incrementAction = {
            type: 'counter/increment'
        }
        dispatch(incrementAction)
    }

    return <div>
        <h1>Counter -React -Redux</h1>
        <h2>Counter : {state.counter}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            dispatch({ type: 'counter/decrement' })
        }}>-</button>

    </div>
}

const App = () => {
    return <Provider store={appStore}>
        <Counter />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>

)
....................................................................................
			immerjs and reducers
.....................................................................................
import { configureStore } from '@reduxjs/toolkit'
import { produce } from 'immer'
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { Provider, useDispatch, useSelector } from 'react-redux'

//redux coding
//reducer 
const CounterReducer = (state = { counter: 10 }, action) => {
    //biz logic
    switch (action.type) {
        case 'counter/increment':
            //immutable logic
            //return { ...state, counter: state.counter + 1 }
            return produce(state, (draft) => {
                draft.counter += 1
            })
        case 'counter/decrement':
            //immutable logic
            //return { ...state, counter: state.counter - 1 }
            return produce(state, (draft) => {
                draft.counter -= 1
            })
        default:
            //default state
            return state;
    }

}
//create store Object
const appStore = configureStore({
    reducer: {
        //name:Reference
        counter: CounterReducer
    }
})
//react coding

const Counter = props => {

    //read value from redux
    const state = useSelector((state) => {
        //appState.reducerName
        return state.counter
    })
    const dispatch = useDispatch()

    const onIncrement = () => {
        console.log('increment')
        //dispactch an action to redux
        const incrementAction = {
            type: 'counter/increment'
        }
        dispatch(incrementAction)
    }

    return <div>
        <h1>Counter -React -Redux</h1>
        <h2>Counter : {state.counter}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            dispatch({ type: 'counter/decrement' })
        }}>-</button>

    </div>
}

const App = () => {
    return <Provider store={appStore}>
        <Counter />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>

)
....................................................................................
			  Multi Reducers
...................................................................................

import { configureStore } from '@reduxjs/toolkit'
import { produce } from 'immer'
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { Provider, useDispatch, useSelector } from 'react-redux'

const IncrementReducer = (state = { counter: 10 }, action) => {
    //biz logic
    switch (action.type) {
        case 'counter/increment':
            return produce(state, (draft) => {
                draft.counter += 1
            })
        default:
            //default state
            return state;
    }

}

const DecrementReducer = (state = { counter: 10 }, action) => {
    //biz logic
    switch (action.type) {
        case 'counter/decrement':
            return produce(state, (draft) => {
                draft.counter -= 1
            })
        default:
            //default state
            return state;
    }

}
//create store Object
const appStore = configureStore({
    reducer: {
        //name:Reference
        increment: IncrementReducer,
        decrement: DecrementReducer
    }
})
//react coding
const Increment = () => {
    const state = useSelector((state) => {
        //appState.reducerName
        return state.increment
    })
    const dispatch = useDispatch()

    return <div>
        <h1>Incrementor : {state.counter}</h1>
        <button onClick={() => {
            dispatch({ type: 'counter/increment' })
        }}>+</button>
    </div>
}

const Decrement = () => {
    const state = useSelector((state) => {
        //appState.reducerName
        return state.decrement
    })
    const dispatch = useDispatch()

    return <div>
        <h1>Decrementor : {state.counter}</h1>
        <button onClick={() => {
            dispatch({ type: 'counter/decrement' })
        }}>+</button>
    </div>
}

const Counter = props => {
    return <>
        <Increment />
        <hr />
        <Decrement></Decrement>
    </>
}

const App = () => {
    return <Provider store={appStore}>
        <Counter />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>

)



