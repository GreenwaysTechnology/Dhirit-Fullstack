			 React/React.js
.....................................................................................

What is react?
 A JavaScript library for building user interfaces.

What is Angular?
  Angular is javascript framework for building user interfaces

What is Vue.js?
 Vue.js is javascript framework for building user interfaces

What is lib and framework?

 lib solves only one problem where as framework provides every thing end to end to build apps

Angular vs React:

1.Design pattern

 Angular uses traditional MVC design pattern 

React uses "Flux" design pattern

Flux is new design pattern to design ui invented by facebook.
 https://facebookarchive.github.io/flux/

https://facebookarchive.github.io/flux/docs/in-depth-overview

In Flux pattern react is "View/Ui/Presentation" Layer.

In Flux Pattern data is changed via "One directional Flow", You cant change data directly.

2.Coding style
  
 Any User interface development frameworks provides 
  1.Markup  - html code,css
  2.Data 

Angular isloates 
  markup(html,css) into separate  called "templates"
  data into services(holding data and biz logic)

React isloates
  markup into js code
  data into js code- hooks,state  management libs like redux...
 React embeds everything into javascript...

Programming files 
  Angular maintains lot of files, components,services,modules,directives,filters etc..which makes code base heavier

  React maintains very less code - components,statement management files,hooks...

Common things in both:

 Component driven, props
.....................................................................................
			     DOM
			 Virtual DOM
.....................................................................................

What is DOM?
   DOM is specification  released by W3c organgization,in order to build web apps for browsers.
https://www.w3.org/TR/1998/WD-DOM-19980416/		

in order to understand DOM fully , we need to understand HTML very deeply.

source code

hello.java
hello.c
hello.cpp
hello.py
hello.js
 ----->compiled ?
to generate assembly instructions

|
compiled code - assembly instruction
 hello.class
 hello.obj
|
Execute
 final output

HTML:

1.HTML IS PL? 
  - YES
2.HTML Is compiled 
  -YES
  HTML source code is compiled into assembly. 

3.HTML is executed?
  Yes

source code:

index.html

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

|
-------------------Browser
loader---LOAD Code into browser
 |
  from file: or http:
 |
Parser :
   Parser is special compiler which converts source into lexcial tree(string tree)

body
  div
     h1
        Welcome 
     h1
  div
body
|
 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body

.....................................................................................
				Runtime 
.....................................................................................
HTML Execution engine : Request Os ,to allocate memory :Runtime

-LinkedList
body -Node
 div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body

|
 Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
 |
Layout/Paint Engine: will convert nodes into pxs : final output

.....................................................................................
         Static web pages: htmls are displayed into browser.
.....................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

			That is birth of javascript
.....................................................................................
..............................................................................................
Static web pages: htmls are displayed into browser.
..............................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

that is birth of javascript.

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.

.....................................................................................

............................................................................................

How dom works?

index.html           Browser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT Inside javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*************************************************************************************

Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.
 
How via factory Objects: object helps to get other documents

Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.


Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.
...................................................................................
What is our objective here? DOM Programming?

Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements

HTMLElement document.getElementById(id)
      Find an element by element id
HTMLElement Document document.getElementsByTagName(name)
	Find elements by tag name
HTMLElement document.getElementsByClassName(name)
	Find elements by class name

HTMLElement document.querySelectory(selector) 
      find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements
document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element

/////////////////////////////////////////////////////////////////////////////////////

..................................................................................
		Birth of Java script libs and frameworks
....................................................................................
In 2001,DOM Wrappers - libs /frameworks came into picture.
 DOJO
2005, JQuery

After 2006 , community people started introducing so many js frameworks and libs..

Most Popular libs and frameworks

1.JQuery
2.Angular.js
3.Dojo
4.Extjs
5.Angular
6.React
7.Vue js
etc.....

Architecture tech stack for dom programming


Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine

Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		              -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	             React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
.....................................................................................

How react represents dom inside react engine?

Based on VDOM(Virtual DOM) specification...
	The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.

React is created by face book.

React was created not for others but created for face book one of the use case called "Buddylist" / chat application.

instagram web version was fully built by react.

React most implementations

1.flipkart ui is written react.
2.espn cric info
3.facebook use case chat , graph....
4.netflix
etc......

Where we can use React ? What type of application we can build using react.

Single Page web app...

Data intensive application // Data driven app
 where more data , which are chainging rapidly, where you want to update ui very faster with out ui flickering.

React can be used to build application for 

.........................................
1.browsers : Desktop
2.Mobile Apps : React Native

face book is working on many futures projects related to react

3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV (React Native)  : React for TV.
6.React IOT : any devices

We are going to learn react web for browsers.

React core modules:

react.js      => Core module
react-dom.js  => Browser
.....................................................................................				React and ui building
...................................................................................
React uses  a small programming language to describe UI called "JSX"

As we discussed React is used in many app dev like browser,mobile,tv apps.

Each app type(browser,mobile) has its own JSX syntax...

Browser jsx uses HTML as language
Mobile Jsx uses "Mobile markup" as language.

-----------------------------------------------------------------------------
 Markup layer             |  React Core Engine    | Render Engine   | Target
-----------------------------------------------------------------------------

HTML Markup---------------|  Object Tree(V.DOM)   | ReactDom.render |  Browser

Mobile Markup-------------|  Object Tree          |ReactNative.render| Mobile 						   /Tabs/TV

..............
VR Markup---------------  |  Object Tree          |VR.render         |VR devices

IOT Markup--------------- |  Object Tree          | IOT.render       |IOT Devices   
....................................................................................
Object Tree :

Note : in js every html element is object, in browser every element is node which forms tree.
<div>
   <h1>
       hello
   </h1>
       |
       div
          |
          h1
            hello

         |
         divObject
		|
		H1 Object
			hello


		|
		React engine
		   |

.....................................................................................
			 React Project Setup
.....................................................................................
We are going to build single page web app.

React teams offers tool set to create react project.

create-react-app
 now this tool has been depreciated.

now a days we are using vite based tool to create react projects.

npm create vite@latest

G:\dhiriti>npm create vite@latest
Need to install the following packages:
create-vite@5.3.0
Ok to proceed? (y) y


> npx
> create-vite

√ Project name: ... hello-react
√ Select a framework: » React
√ Select a variant: » JavaScript

Scaffolding project in G:\dhiriti\hello-react...

Done. Now run:

  cd hello-react
  npm install
  npm run dev

Project structure:
package.json
{
  "name": "hello-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "vite": "^5.3.1"
  }
}

entry file:
main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
...................................................................................
			DOM programming using plain js
...................................................................................

//how to create a dom element and update on existing tree
function createElement() {
  const HeadingElement=document.createElement('h1')
  HeadingElement.innerHTML='Hello React'
  const rootElement = document.getElementById('root')
  rootElement.appendChild(HeadingElement)
  //console.log(HeadingElement)
}
createElement();
....................................................................................
			DOM element creation using React
....................................................................................

main.jsx

import ReactDOM from 'react-dom/client'

//DOM element creation
//here we mix html + js code => jsx
const HeadingElement = <h1>Hello React!</h1>
// const rootElement =  document.getElementById('root')
// const root=ReactDOM.createRoot(rootElement)
// //vdom into real dom
// root.render(HeadingElement)

ReactDOM.createRoot(document.getElementById('root')).render(HeadingElement)

.....................................................................................
	JSX - java script and XML - langugage to create User interfaces
.....................................................................................

React uses declarative dom programing using a mini language invented by facebook : JSX

JSX : - javascript xml

 1.PL language built by face book to write user interfaces.
 2.JSX is collection of html markup and javascript.
 3.JSX is dsl and declarative.
 4.Every device has its own jsx language syntax.
 5.Browsers jsx can't be used for building mobile application.

Since jsx  is a language cant be executed on browser /mobile directly.
.....................................................................................
JSX compilation model:

                   layout.js / layout.jsx
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Excution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		     Excute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
		     Render Engine ; will convert react object tree into js dom object tree
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |      |
     Browser  Mobile

JSX is used to create dom elements.

Every DOM element is object.

What is Component ?
  Component is Object , Coined by MS in 1989.

According to ms, Component is object which has state(data),behaviour(methods) + User interface(Visual).
 eg:Button,TextBox,Grid,Menu,MenuBar,Layout,Table.....

Like Object tree(DOM Tree), In React we can create "Component" Tree.


      Node===DOM Object====Component
       h1     HTMLHeading   Heading

"React apps are made out of components. A Component is piece of the UI that has its own logic and appearance, A CompIn coding 

Threre two libs 
1.react.js  => to create component and manages all features related component.
2.react-dom => Render engine

react.js

1.React
  It top level class which provides all apis to create,delete,update components.


react-dom.js

2.ReactDOM
   It is top level class which provides api to flush the v.dom into real dom.onent can be small as a button or as large as an entire Page"

..................................................................................
			Component Creational patterns
...................................................................................


1.variable pattern
2.functional pattern
3.es 6 class pattern

Components can be created any one or mixed way  style.
"functional Pattern" is more popular and recommended pattern....

steps:
create app 
 project name : compoenents

1.variable pattern
import React from 'react'
import ReactDOM from 'react-dom/client'

//variable Pattern
const Hello = <h1>Hello</h1>

ReactDOM.createRoot(document.getElementById('root')).render(Hello)


Functional Pattern:
...................

import React from 'react'
import ReactDOM from 'react-dom/client'

//functional pattern
function Hello(){
    //jsx element
    return <h1>
        Hello
    </h1>
}


ReactDOM.createRoot(document.getElementById('root')).render(Hello())

Here you are calling function "Hello()", which in returns dom element.

This way of calling function is called "Imperative way".

We need to call function using "Declarative way" - Readable way.

React recommends to call function using html(xml) syntax. <Hello></Hello>

import React from 'react'
import ReactDOM from 'react-dom/client'

//functional pattern
function Hello(){
    //jsx element
    return <h1>
        Hello
    </h1>
}


// ReactDOM.createRoot(document.getElementById('root')).render(Hello())
ReactDOM.createRoot(document.getElementById('root')).render(<Hello></Hello>)


Function Refactoring:

 we can write ES6 arrow functions.

import React from 'react'
import ReactDOM from 'react-dom/client'

//functional pattern
// function Hello(){
//     //jsx element
//     return <h1>
//         Hello
//     </h1>
// }

// const Hello = () => {
//         return <h1>
//         Hello
//     </h1>
// }

const Hello = () => <h1>
    Hello
</h1>



// ReactDOM.createRoot(document.getElementById('root')).render(Hello())
ReactDOM.createRoot(document.getElementById('root')).render(<Hello></Hello>)

....................................................................................
			 class components
...................................................................................

Using ES6 Classes we can create components, now a days class components been deprecated.
import React from 'react'
import ReactDOM from 'react-dom/client'

class Hello extends React.Component {

    render(){
        return <h1>
            Hello
        </h1>
    }

}

ReactDOM.createRoot(document.getElementById('root')).render(<Hello></Hello>)

.....................................................................................
			Exploring JSX
.....................................................................................

JS-Javascript
X -  XML

Since HTML parser is weak, but when y write react code, we need consistent code generation.

So that react team, developed compiler follows basic xml rules.


Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

			
const Welcome = ()=>{
    return <div>
        <h1>Hello
    </div>
}
This code will throw error.

Self closing:
import ReactDOM from 'react-dom/client';
import logo from './logo.svg';

//must have closing tag
// const Welcome = ()=>{
//     return <div>
//         <h1>Hello
//     </div>
// }
const Welcome = () => {
    return <div>
        <img src={logo} className="App-logo" alt="logo" />
    </div>
}

const root = ReactDOM.createRoot(document.getElementById('root'));

// root.render(<Welcome></Welcome>)
root.render(<Welcome/>)
.....................................................................................

Root Element:

import ReactDOM from 'react-dom/client';
import logo from './logo.svg';

const Welcome = () => {
    return <div>
        <h1>Site Heading</h1>
        <p>This is react</p>
    </div>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Welcome />)

Note:
 without root element , compiler will not compile the code, but
.....................................................................................
			  Fragments
....................................................................................

Fragements are used to wrap elements invisible way.

Suppose if i dont want any root element, then we can use Fragement.

Fragements are used to escape from compiler.

Syntax:

 <React.Fragment>

 </React.Fragement>


 <Fragment>

 </Fragement>

 <>

 </>
// import React, { Fragment } from 'react'
import ReactDOM from 'react-dom/client'

// const Hello = ()=> {

//     return <h1>Hello
// }

// const Greeter = () => {
//     return <div>
//         <h1>IBM Welcomes you</h1>
//         <p>This is paragraph</p>
//     </div>
// }

//Fragements
// const Greeter = () => {
//     return <React.Fragment>
//         <h1>IBM Welcomes you</h1>
//         <p>This is paragraph</p>
//     </React.Fragment>
// }

// const Greeter = () => {
//     return <Fragment>
//         <h1>IBM Welcomes you</h1>
//         <p>This is paragraph</p>
//     </Fragment>
// }
const Greeter = () => {
    return <>
        <h1>IBM Welcomes you</h1>
        <p>This is paragraph</p>
    </>
}

// ReactDOM.createRoot(document.getElementById('root')).render(<Hello></Hello>)
ReactDOM.createRoot(document.getElementById('root')).render(<Greeter />)

.....................................................................................
			 Component Composition
import ReactDOM from 'react-dom/client'


const Profile = () => {
    return <section>
        <h3>Alan Turing</h3>
        <h4>Born : 23 June 1912</h4>
        <h4>Died : 7 June 1954 (aged 41)
            Wilmslow, Cheshire, England
        </h4>
    </section>
}

function Gallery() {
    return <>
        <h1>Scientists / Computer</h1>
        <Profile />
        <Profile />
        <Profile />
    </>
}

const App = <>
    <div>
        <Gallery />
    </div>
</>
....................................................................................
			Structuring React apps
		  Component Composition and Modularity
.....................................................................................

Every Component will go into separate folders and files, through es 6 modules you can import export components..


Every Component will go into separate folders and files, through es 6 modules you can import export components..

https://legacy.reactjs.org/docs/faq-structure.html

Is there a recommended way to structure React projects?

React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.

Grouping by features or routes

common/
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css


EG:

src/profile/Profile.jsx
export const Profile = () => {
    return <section>
        <h3>Alan Turing</h3>
        <h4>Born : 23 June 1912</h4>
        <h4>Died : 7 June 1954 (aged 41)
            Wilmslow, Cheshire, England
        </h4>
    </section>
}

src/gallery/Gallery.jsx
import { Profile } from "../profile/Profile"

export function Gallery() {
    return <>
        <h1>Scientists / Computer</h1>
        <Profile />
    </>
}

src/App.jsx
import { Gallery } from "./gallery/Gallery";


export default function App() {
  return <div>
        <Gallery />
  </div>
}

src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
...................................................................................
			Barrel Export
..................................................................................

src/welcome/
   Hello.jsx
   Hai.jsx
   Greeter.jsx

when you import these files where ever, we have to import 
		 
import { Hello } from "./welcome/Hello"
import { Hai } from "./welcome/Hai"
import { Greeter } from "./welcome/Greeter"

Barrel export is nothing simplifiying export and import...
 Using Barrel export you dont need to use fileName when import
 Using Barrel export you dont need to use multiple import statement.

src/welcome/
   Hello.jsx
   Hai.jsx
   Welcome.jsx
   -index.js

YOu have to use index.js file

EG:

src/gallary/index.js
import { Gallery } from "./Gallery";

export { Gallery }

src/profile/index.js

import { Profile } from "./Profile";

export { Profile }



src/gallery/Gallery.jsx
// import { Profile } from "../profile/Profile"
import { Profile } from '../profile'

export function Gallery() {
    return <>
        <h1>Scientists / Computer</h1>
        <Profile />
    </>
}
src/App.jsx
// import { Gallery } from "./gallery/Gallery";
import { Gallery } from "./gallery";


export default function App() {
  return <div>
    <Gallery />
  </div>
}

.....................................................................................
			 React Dev tool
.....................................................................................

It is tool part of browser as plugin, used to insepect the structure of app.
https://react.dev/learn/react-developer-tools
.....................................................................................
			How to add css in react
.....................................................................................


1.Your own css
2.thrid party css frameworks - bootstrap

class
style - This will see later

if yo want to use bootstrap

npm i bootstrap

src/main.jsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
// import './index.css'
import 'bootstrap/dist/css/bootstrap.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
.....................................................................................
			 Data && React
....................................................................................

Data Binding:

Data can be attached in react using {}

How to represent data?
->primitives - string,numbers,boolean
->objects - object,arrays

How to bind data?
  {variable} {expression}
 
  {a} {fun()} {10*2} {isHidden ? 'Show':'Hide'} 

..................................................................................
			   Data Binding Patterns

1.property binding aka props pattern
2.State binding aka state pattern.

props Pattern:

npm create vite@latest

props-pattern
.....................................................................................

When you think about component , you should thing about resuablity..


src/gallery/Gallary.jsx
import { Profile } from "../profile/Profile"

export function Gallery() {
    let dided = " 7 June 1954 (aged 41) Wilmslow, Cheshire, England"
    return <>
        <h1>Scientists / Computer</h1>
        <Profile name={"Alan Turing"} born={"23 June 1912"} died={dided} isAlive={false} />
        <Profile name={"Timothy John Berners-Lee"} born={"23 June 1912"} isAlive={true}  />
    </>
}		
src/profile/Profile.jsx

//props = object
export const Profile = (props) => {
    return <section>
        <h3>{props.name}</h3>
        <h4>Born : {props.born}</h4>
        {!props.isAlive ? <h4>{`Died: ${props.died}`}</h4> : null}
    </section>
}
.....................................................................................
			  ES6 Object destructuring
....................................................................................


How to destructure props?

//props = object
// export const Profile = (props) => {
//     return <section>
//         <h3>{props.name}</h3>
//         <h4>Born : {props.born}</h4>
//         {!props.isAlive ? <h4>{`Died: ${props.died}`}</h4> : null}
//     </section>
// }

//destructure
// export const Profile = (props) => {
//     const { name, born, isAlive, died } = props
//     return <section>
//         <h3>{name}</h3>
//         <h4>Born : {born}</h4>
//         {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
//     </section>
// }

export const Profile = ({ name, born, isAlive, died }) => <section>
    <h3>{name}</h3>
    <h4>Born : {born}</h4>
    {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
</section>

.....................................................................................
			  Default Props
.....................................................................................

if property not passed you can supply default props.

How to supply default props?

1.old way

export const Profile = ({ name, born, isAlive, died }) => <section>
    <h3>{name}</h3>
    <h4>Born : {born}</h4>
    {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
</section>

//default props
Profile.defaultProps={
    name:'Scientists Name',
    born: '01 Jan 1900',
    isAlive:false,
    died:'23 June 1912'

}

2.new way

export const Profile = ({ name='Scientists Name', born='01 Jan 1900', isAlive=false, died='01 Jan 1900' }) => <section>
    <h3>{name}</h3>
    <h4>Born : {born}</h4>
    {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
</section>
.....................................................................................
			 Property Rethrow
.....................................................................................



//props = object
// export const Profile = (props) => {
//     return <section>
//         <h3>{props.name}</h3>
//         <h4>Born : {props.born}</h4>
//         {!props.isAlive ? <h4>{`Died: ${props.died}`}</h4> : null}
//     </section>
// }

//destructure
// export const Profile = (props) => {
//     const { name, born, isAlive, died } = props
//     return <section>
//         <h3>{name}</h3>
//         <h4>Born : {born}</h4>
//         {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
//     </section>
// }

// export const Profile = ({ name='Scientists Name', born='01 Jan 1900', isAlive=false, died='01 Jan 1900' }) => <section>
//     <h3>{name}</h3>
//     <h4>Born : {born}</h4>
//     {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
// </section>

// //default props
// Profile.defaultProps={
//     name:'Scientists Name',
//     born: '01 Jan 1900',
//     isAlive:false,
//     died:'23 June 1912'

// }

// export const Profile = ({ name = 'Scientists Name', born = '01 Jan 1900', isAlive = false, died = '01 Jan 1900' }) => <section>
//     {/* here we are rethrowing all properties to another component */}
//     <ProfileDetails name={name} born={born} isAlive={isAlive} died={died} />
// </section>



// export const Profile = (props) => <section>
//     {/* here we are rethrowing all properties to another component */}
//     <ProfileDetails name={props.name} born={props.born} isAlive={props.isAlive} died={props.died} />
// </section>
export const Profile = (props) => <section>
    {/* Rethrowing all properties to another component using Spread Notation */}
    <ProfileDetails {...props} salution="Mr/Mrs."/>
</section>

export const ProfileDetails = ({salution="Mr/Mrs.", name = 'Scientists Name', born = '01 Jan 1900', isAlive = false, died = '01 Jan 1900' }) => {
    return <><h3>{salution} {name}</h3>
        <h4>Born : {born}</h4>
        {!isAlive ? <h4>{`Died: ${died}`}</h4> : null}
    </>
}
.....................................................................................				Inline Styling
....................................................................................

<div class="cssClass">

<div style={}>

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const Header = () => {

    return <div>
        <h1 style={styles.heading}>Header</h1>
        <h2 style={{ color: 'blue', fontFamily: "sans-serif" }}>Your Company Goes Here</h2>
    </div>
}
const styles = {
    heading: {
        color: 'red'
    }
}


const App = () => {
    return <Header>

    </Header>
}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................
				What can be prop
.....................................................................................

1.Prop can be data
2.Prop can another component or element
..
3.Prop can be function
4.Prop can be state(dynamic prop)



1.Prop can another component or element.

How to render component

 <Grid></Grid> -  Grid can have children: passing prop
 <Grid/> -  Grid has no children
 
Parent-Child Relation ship:

cont A = ()=>{
  return <B/>
}
Parent-Child Relation ship:
 via props

<Layout> -parent
	<Page>-child
		<Header> -child
		   <Logo> -child

		   </Image>
		</Header>
	</Page>
</Layout>  
.....................................................................................
			Component as Prop

.....................................................................................

Use case : Without component as prop.

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const Page = () => {
    return <h1>Page</h1>
}
const Header = () => {
    return <h1>Header</h1>
}
const Footer = () => {
    return <h1>Footer</h1>
}
const Layout = () => {
    return <div>
        <Header />
        <Page />
        <Footer />
    </div>
}

const App = () => {
    return <>
        <Layout />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
...................................................................................

Use case: Component strucutre with props:
.........................................

<Layout> -parent
	<Page>-child
		<Header> -child
		   <Logo> -child

		   </Image>
		</Header>
	</Page>
</Layout>  

.....................................................................................
			Component as Prop

.....................................................................................

Use case : Without component as prop.

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const Page = () => {
    return <h1>Page</h1>
}
const Header = () => {
    return <h1>Header</h1>
}
const Footer = () => {
    return <h1>Footer</h1>
}
const Layout = () => {
    return <div>
        <Header />
        <Page />
        <Footer />
    </div>
}

const App = () => {
    return <>
        <Layout />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

Use case : with Props:
......................

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const Page = ({ children }) => {
    return <>
        {children}
    </>
}
const Header = ({ title }) => {
    return <h1>{title}</h1>
}
const Footer = () => {
    return <h1>Footer</h1>
}
const Layout = (props) => {
    return <div>
        {props.children}
    </div>
}
const User = (props) => {
    console.log(props)
    return <div>
        <img src={props.imageSrc} alt='Your Image' />
        <h1>{props.id}</h1>
        <p>{props.userName}</p>
        <p>{props.mail}</p>
        <p>{props.status ? "Available" : "Not Available"}</p>
    </div>
}


const App = () => {
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'

    return <>
        <Layout>
            {/* Passing Header as prop */}
            <Header title="User Information system">
                 
            </Header>
            {/* Passing Page as prop */}
            <Page>
                <User userName={"Ram"} id={2} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
            </Page>
            {/* Passing Footer as prop */}
            <Footer />
        </Layout >
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................
			  List : How to render array
.....................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const List = props => {
    return <div>
        <ul>
            {
                props.names.map(name=>{
                    return <li>{name}</li>
                })
            }
        </ul>
    </div>
}

const App = () => {
    const names = ['Subramanian', 'Murugan', 'Geetha', 'DhiviyaSree', 'Shirisha']
    return <div>
        <h1>List</h1>
        <List names={names}/>
    </div>

}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

.....................................................................................
			 Object List Rendering

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import POSTS from './mock-data/posts'

const Posts = ({ posts }) => {
    return <>
        {
            posts.map(post => {
                return <section key={post.id}>
                     <h1>{post.id}</h1>
                     <h3>{post.title}</h3>
                     <p style={{fontFamily:'sans-serif', color:'Highlight'}}>{post.body}</p>
                </section>
            })
        }
    </>
}

const App = () => {
    return <div>
        <h1>POSTS</h1>
        <Posts posts={POSTS} />
    </div>

}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

Task:

By using list

1.Card View
2.Table View /Grid View
.....................................................................................










